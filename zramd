#!/bin/bash
MEMINFO="$(cat /proc/meminfo | grep MemTotal | cut -d: -f2 | sed 's\kB\\g')"
MAXSIZE="$((MEMINFO/1024))"
ZRAM_CONFIG_PATH=/etc/zram.d
ZRAM_INIT_CONFIG=$ZRAM_CONFIG_PATH/zram0
SIZE_COMPARE=0
NUM_DEVICES=0
create_zram_config()
{
  mkdir -p /etc/zram.d
  chmod 775 /etc/zram.d
  echo "#!/bin/bash" > $ZRAM_INIT_CONFIG
  echo "# ZRAM Main-File generated by systemd" >> $ZRAM_INIT_CONFIG
  echo "# Do not edit this file manually, please use 'zramconfig'" >> $ZRAM_INIT_CONFIG
  echo "DEVICE=zram0" >> $ZRAM_INIT_CONFIG
  echo "COMP_ALGORITHM=lz4" >> $ZRAM_INIT_CONFIG
  echo "SIZE=100M" >> $ZRAM_INIT_CONFIG
  echo "TYPE=swap" >> $ZRAM_INIT_CONFIG
  echo "SWAP_PRI=75" >> $ZRAM_INIT_CONFIG
  echo "SWAPPINESS=90" >> $ZRAM_INIT_CONFIG
  chmod +x $ZRAM_INIT_CONFIG
}
clear_variables()
{
  unset DEVICE
  unset COMP_ALGORITHM
  unset SIZE
  unset TYPE
  unset MOUNT_OPTIONS
  unset MOUNT_POINT
  unset SWAP_PRI
  unset SWAPPINESS
  unset DEVICE_PATH
}
case $1 in
  "start")
      if [ -f $ZRAM_INIT_CONFIG ]; then
        unset i
        for i in $ZRAM_CONFIG_PATH/zram*; do
          NUM_DEVICES=$((NUM_DEVICES+1))
        done
        modprobe zram num_devices=$NUM_DEVICES
        unset i
        for i in $ZRAM_CONFIG_PATH/zram*; do
          clear_variables
          . $i
          SIZE_COMPARE=$((SIZE_COMPARE+$(echo $SIZE | cut -dM -f1)))
          if [ $SIZE_COMPARE -gt $MAXSIZE ]; then
            echo " !!! Failed to create $i with $SIZE , exceeded $MAXSIZE M diskspace !!! "
            exit 1
          fi
          echo $COMP_ALGORITHM > /sys/block/"$DEVICE"/comp_algorithm
          echo $SIZE > /sys/block/"$DEVICE"/disksize
          DEVICE_PATH=/dev/"$DEVICE"
            case $TYPE in
              swap)
                  mkswap --label "$DEVICE" $DEVICE_PATH > /dev/zero
                  swapon -p "$SWAP_PRI" $DEVICE_PATH > /dev/zero
                  echo "   -> $DEVICE_PATH $TYPE pri=$SWAP_PRI $SIZE"
                  echo "$DEVICE_PATH $TYPE pri=$SWAP_PRI $SIZE" > /tmp/.$DEVICE.$TYPE
                  if [ -n "$SWAPPINESS" ]; then
                    sysctl vm.swappiness=$SWAPPINESS > /dev/zero
                  fi
                  ;;
              ext4|ext2|vfat)
                  mkdir -p $MOUNT_POINT
                  case $TYPE in
                    ext4|ext2)
                      mkfs.$TYPE -L "$DEVICE" -m 0 "$DEVICE_PATH" > /dev/zero
                      ;;
                    vfat)
                      mkfs.vfat -F 32 -n "DEVICE" "$DEVICE_PATH" > /dev/zero
                      ;;
                  esac
                  mount -o $MOUNT_OPTIONS $DEVICE_PATH $MOUNT_POINT
                  chmod 775 $MOUNT_POINT
                  echo "   -> $DEVICE_PATH $TYPE $MOUNT_POINT $MOUNT_OPTIONS $SIZE"
                  echo "$DEVICE_PATH $TYPE $MOUNT_POINT $MOUNT_OPTIONS $SIZE" > /tmp/.$DEVICE.$TYPE
                  ;;
            esac
        done
      exit 0
      else
        echo " No zram0 configuration found at $ZRAM_CONFIG_PATH ... !"
        create_zram_config
        echo " zram0 configuration created at $ZRAM_CONFIG_PATH ... !"
        echo " Restarting service now ... !"
        systemctl restart zramd.service
        exit 0
      fi
      ;;
  "stop")
      unset i
      if [ -f /tmp/.zram*.* ]; then
        for i in /tmp/.zram*.*; do
          case $(echo $i | cut -d/ -f3 | cut -d. -f3) in
            ext2|ext4|vfat)
              umount $(cat $i | cut -d" " -f1)
              rm -rf $(cat $i | cut -d" " -f3)
              rm -f $i
              ;;
            swap)
              swapoff -L $(cat $i | cut -d" " -f1 | cut -d/ -f3) > /dev/zero
              rm -f $i
              ;;
            esac
        done
        rmmod zram
        echo " Devices unmounted ... !"
        echo " Deactivated Module and cleared all created directories ... !"
        echo " --- Service stop ---"
        exit 0
      else
        rmmod zram
        echo " No Devices found ... , deactivated module !"
        echo " --- Service stop ---"
        exit 0
      fi
      exit 0
      ;;
  "restart")
      systemctl stop zramd.service
      sleep 0.25
      systemctl start zramd.service
      exit 0
      ;;
  *)
      echo " !!! Invalid Option ... !!! "
      exit 1
      ;;
esac
